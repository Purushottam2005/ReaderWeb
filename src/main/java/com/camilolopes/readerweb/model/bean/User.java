package com.camilolopes.readerweb.model.bean;

// default package
// Generated 10/06/2013 22:40:38 by Hibernate Tools 4.0.0

import java.util.Date;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

import com.camilolopes.readerweb.enums.StatusUser;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name = "user", uniqueConstraints = @UniqueConstraint(columnNames = "EMAIL"))
public class User implements java.io.Serializable,Comparable<User> {

	
	private static final long serialVersionUID = 9108778602728711429L;
	private UserId id;
	private Type type;
	private String name;
	private String lastname;
	private String email;
	private String password;
	@Enumerated(EnumType.STRING)
	@Column(name="STATUS") 
	private  StatusUser status;
	private Date registerDate;
	private Date expirationDate;

	public User() {
	}

	public User(UserId id, Type type) {
		this.id = id;
		this.type = type;
	}

	public User(UserId id, Type type, String name, String lastname,
			String email, String password, StatusUser status, Date registerDate,
			Date expirationDate) {
		this.id = id;
		this.type = type;
		this.name = name;
		this.lastname = lastname;
		this.email = email;
		this.password = password;
		this.status = status;
		this.registerDate = registerDate;
		this.expirationDate = expirationDate;
	}

	@EmbeddedId
	@AttributeOverrides({
			@AttributeOverride(name = "id", column = @Column(name = "id", nullable = false)),
			@AttributeOverride(name = "typeId", column = @Column(name = "TYPE_ID", nullable = false)) })
	public UserId getId() {
		return this.id;
	}

	public void setId(UserId id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "TYPE_ID", nullable = false, insertable = false, updatable = false)
	public Type getType() {
		return this.type;
	}

	public void setType(Type type) {
		this.type = type;
	}

	@Column(name = "NAME", length = 45)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "LASTNAME", length = 45)
	public String getLastname() {
		return this.lastname;
	}

	public void setLastname(String lastname) {
		this.lastname = lastname;
	}

	@Column(name = "EMAIL", unique = true, length = 45)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "PASSWORD", length = 45)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}


	@Temporal(TemporalType.DATE)
	@Column(name = "REGISTER_DATE", length = 10)
	public Date getRegisterDate() {
		return this.registerDate;
	}

	public void setRegisterDate(Date registerDate) {
		this.registerDate = registerDate;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "EXPIRATION_DATE", length = 10)
	public Date getExpirationDate() {
		return this.expirationDate;
	}

	public void setExpirationDate(Date expirationDate) {
		this.expirationDate = expirationDate;
	}

	public StatusUser getStatus() {
		return status;
	}

	public void setStatus(StatusUser status) {
		this.status = status;
	}

	@Override
	public int compareTo(User o) {
		
		return o.id.getId() - this.id.getId();
	}

}
